stages:
  #- test
  - debug_build
  - release_build
  - deploy

cache:
  paths:
    - $CI_PROJECT_DIR/.pub-cache/

.build-android:
  image: cirrusci/flutter:stable
  tags: [ docker ]
  variables:
    BUILD_TYPE: none
  script:
    - echo Build ${BUILD_TYPE} app
    - flutter build appbundle --${BUILD_TYPE}
  artifacts:
    paths:
      - build/app/outputs/bundle/$BUILD_TYPE/app-${BUILD_TYPE}.aab

.build-mac-os:
  tags: [ mac-os ]
  variables:
    BUILD_TYPE: none
  script:
    - echo Build ${BUILD_TYPE} app
    - flutter build macos --${BUILD_TYPE}
    - cd installers/dmg_creation
    - rm ./synopce.dmg || true
    - appdmg ${BUILD_TYPE}_config.json ./synopce.dmg
  artifacts:
    paths:
      - installers/dmg_creation/synopce.dmg

#flutter_test:
#  image: cirrusci/flutter:stable
#  stage: test
#  tags: [ docker ]
#  before_script:
#    - sh ./scripts/with_flutter.sh
#  script:
#    - flutter test

debug_build_android:
  extends:
    - .build-android
  stage: debug_build
  variables:
    BUILD_TYPE: debug
  before_script:
    - sh ./scripts/with_flutter.sh
  except:
    - tags

debug_build_macos:
  extends:
    - .build-mac-os
  stage: debug_build
  variables:
    BUILD_TYPE: debug
  before_script:
    - sh ./scripts/with_flutter.sh
  except:
    - tags

release_build_android:
  extends:
    - .build-android
  stage: release_build
  variables:
    BUILD_TYPE: release
  before_script:
    - sh ./scripts/setup_app_version.sh
    - sh ./scripts/setup_android_sign.sh
    - sh ./scripts/with_flutter.sh
  only:
    - tags

release_build_macos:
  extends:
    - .build-mac-os
  stage: release_build
  variables:
    BUILD_TYPE: release
  before_script:
    - sh ./scripts/setup_app_version.sh
    - sh ./scripts/with_flutter.sh
  only:
    - tags

deploy:
  image: node:16-alpine
  tags: [ docker ]
  stage: deploy
  dependencies:
    - release_build_android
    - release_build_macos
  before_script:
    - npm install --location=global appcenter-cli
    - appcenter login --token $APPCENTER_API_TOKEN
  script:
    - appcenter distribute release -f build/app/outputs/bundle/release/app-release.aab -g Collaborators --app Synopce/Synopce-android
    - IFS='+'; versions=($CI_COMMIT_TAG); unset IFS;
    - appcenter distribute release -f installers/dmg_creation/synopce.dmg -g Collaborators --app Synopce/Synopce-mac-os --build-version ${versions[0]} --build-number ${versions[1]}
  only:
    - tags

deploy_to_playstore:
  image: ruby:latest
  tags: [ docker ]
  stage: deploy
  dependencies:
    - release_build_android
    - release_build_macos
  before_script:
    - mkdir -p keys || true
    - cat $PLAY_STORE_KEY
    - cat $PLAY_STORE_KEY | base64
    - cat $PLAY_STORE_KEY | base64 -d > keys/fastlane_release_api_key.json
    - cd android
    - gem install bundler
    - bundle install
    - bundle exec fastlane supply init
  script:
    - IFS='+'; versions=($CI_COMMIT_TAG); unset IFS;
    - echo $CI_COMMIT_TAG_MESSAGE > fastlane/metadata/android/en-US/changelogs/${versions[1]}.txt
    - bundle exec fastlane deploy_to_playstore
  only:
    - tags